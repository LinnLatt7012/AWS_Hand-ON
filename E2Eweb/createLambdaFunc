#!/bin/bash
# set -e
# Configuration
LAMBDA_FUNCTION_NAME="PowerOfMathFunction"          # Name of the Lambda function
RUNTIME="python3.9"                              # Runtime environment
ROLE_NAME="lambda-exec-role"         # IAM Role name for Lambda
HANDLER="lambda_function.lambda_handler"         # Handler name
ZIP_FILE="function.zip"                          # Lambda code package
ROLE_POLICY_ARN="arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
Dyanodb_ARN="arn:aws:dynamodb:eu-north-1:861276108927:table/PowerOfMath"
# Check if the function file exists
if [ ! -f lambda_function.py ]; then
    echo "lambda_function.py not found! Please ensure the Lambda code file exists."
    exit 1
fi

# Step 1: Zip the Lambda function code
echo "Zipping the Lambda function code..."
zip -r $ZIP_FILE lambda_function.py >/dev/null 2>&1

# Step 2: Check if the IAM role exists
ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text 2>/dev/null)
Custom_Policy_ARN= $(aws iam create-policy --policy-name PowerOfMath-Dynamo \
                    --policy-document file://policy.json --query 'Policy.Arn' --output text 2>/dev/null)
if [ -z "$ROLE_ARN" ]; then
    echo "Creating IAM role for Lambda execution..."
    # Create trust policy
    cat > trust-policy.json <<EOL
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
        "Service": "lambda.amazonaws.com"
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
EOL

    # Create the IAM role
    aws iam create-role --role-name $ROLE_NAME \
        --assume-role-policy-document file://trust-policy.json >/dev/null
    
    aws iam create-policy \
        --policy-name my-fun-policy \
        --policy-document file://policy.json
    # Attach the basic execution role policy
    aws iam attach-role-policy --role-name $ROLE_NAME \
        --policy-arn $ROLE_POLICY_ARN

    aws iam --role-name $ROLE_NAME \
        --policy-arn $Custom_Policy_ARN
    # Wait for the role to propagate
    echo "Waiting for IAM role to propagate..."
    sleep 10

    # Get the new role ARN
    ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)
    echo "IAM Role created: $ROLE_ARN"
else
    echo "IAM Role already exists: $ROLE_ARN"
fi

# Step 3: Create or update the Lambda function
echo "Checking if the Lambda function already exists..."

LAMBDA_EXISTS=$(aws lambda get-function --function-name $LAMBDA_FUNCTION_NAME 2>/dev/null)

if [ -z "$LAMBDA_EXISTS" ]; then
    echo "Creating new Lambda function: $LAMBDA_FUNCTION_NAME"
    aws lambda create-function \
        --function-name $LAMBDA_FUNCTION_NAME \
        --runtime $RUNTIME \
        --role $ROLE_ARN \
        --handler $HANDLER \
        --zip-file fileb://$ZIP_FILE >/dev/null

    echo "Lambda function created successfully."
else
    echo "Updating existing Lambda function: $LAMBDA_FUNCTION_NAME"
    aws lambda update-function-code \
        --function-name $LAMBDA_FUNCTION_NAME \
        --zip-file fileb://$ZIP_FILE >/dev/null

    echo "Lambda function updated successfully."
fi

# Step 4: Invoke the Lambda function (optional)
echo "Invoking the Lambda function to test..."
aws lambda invoke \
    --function-name $LAMBDA_FUNCTION_NAME \
    --payload '{"base":2, "exponent": 4}' \
    output.json >/dev/null

echo "Lambda function invoked. Check output.json for the response."
cat output.json

# Cleanup
rm -f trust-policy.json
rm -f $ZIP_FILE

echo "Deployment script completed successfully."
